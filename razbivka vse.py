#!/usr/bin/env python
# coding: utf-8

# In[2]:


from tkinter import * 
import tkinter.ttk as ttk 
import time, threading 
from tkinter import filedialog as fd 
from tkinter import messagebox
from tkinter.ttk import Radiobutton
import datetime as dt
from PIL import Image, ImageTk
#from datetime import date

import pandas as pd
import py_win_keyboard_layout


# In[ ]:


py_win_keyboard_layout.change_foreground_window_keyboard_layout(0x04090409)

# üìó —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìó
def get_address(): 
    global INN 
    global ADRESS
    global COUNT    
      
    INN = t.get(1.0, 'end-1c') 
    ADRESS = adress.get()  
    COUNT = count.get()    
    
def get_address_2(): 
    global INN_2 
    global ADRESS_2
    global COUNT_2    
      
    INN_2 = t_2.get(1.0, 'end-1c') 
    ADRESS_2 = adress_2.get()  
    COUNT_2 = count_2.get()  
    
def get_address_3(): 
    global INN_3 
    global ADRESS_3
    global COUNT_3    
      
    INN_3 = t_3.get(1.0, 'end-1c') 
    ADRESS_3 = adress_3.get()  
    COUNT_3 = count_3.get()     
    
# üíª –†–∞–∑–º–µ—Ä—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ üíª
root = Tk() 
root.title("–†–∞–∑–±–∏–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ò–ù–ù") 
root.resizable(width=False, height=False) 
root.geometry("650x580+600+300") 
#calculated_text = Text(root,height=15, width=50) 


# 1Ô∏è‚É£ —Ä–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º 1Ô∏è‚É£   
def work_1():
    #global SELECTED
    SELECTED = selected.get()
    INN_CHECK = inn_check.get()    
    #lbl.configure(text=selected.get())
    
    #global count_all
    #global count_all_drop_dupli
    # –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    dt_now = str(dt.datetime.now().time())[:8].replace(':', ' ')
    
    # —É–ø–∞–∫–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    inn_list = INN.split()
    inn_data = pd.DataFrame({'inn' : inn_list})
    
    # –≤ –∫–æ–≤—ã—á–∫–∞—Ö –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ —Å –ò–ù–ù, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —Ä–∞–∑–±–∏—Ç—å
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞    
    data = inn_data['inn'].sort_values()
    count_all = len(data)   
    data = data.drop_duplicates().reset_index()
    count_all_drop_dupli = len(data)
    #data.head()
    
# ‚ùå1Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤  
    dt_count = data['inn'].reset_index()  # pd.DataFrame()
    dt_error = data['inn'].reset_index()
    dt_contr_sum = data['inn'].reset_index()
    
    def count_num(dt, col, dt_2, col_2):
        dt[col] = dt_2[col_2].str.split('').str.len() - 2         
    
    count_num(dt_count, 'INN_count', data, 'inn') 
    count_num(dt_contr_sum, 'INN_count', data, 'inn') 
    # –æ—Ç–∫–∏–¥—ã–≤–∞–µ–º —Ç–µ—Ö –∫—Ç–æ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª-–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤
    dt_count_general = dt_count.query('INN_count not in [12, 10]')
    
    dt_count_general_all_1 = dt_count_general['inn'].tolist()  
    
    
# ‚≠ï1Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã    
    def count_warning(dt, col, dt_2, col_2):
        dt[col] = dt_2[col_2].str.isnumeric()
        
    count_warning(dt_error, 'inn_true', data, 'inn')
    count_warning(dt_contr_sum, 'inn_true', data, 'inn')
    # –æ—Ç–∫–∏–¥—ã–≤–∞–µ–º —Ç–µ—Ö –∫—Ç–æ —Å –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    dt_error_general = dt_error.query('inn_true == False')
    
    dt_error_general_all_1 = dt_error_general['inn'].tolist()    
    
# üö´ 1Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã 
    # —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ –¥–∞—Ç–∞—Ñ—Ä–µ–º—ã –ø–æ 10 –∏ 12 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ—Å—è—á–Ω—ã–µ
    dt_10 = dt_contr_sum.query('INN_count == 10 and inn_true == True')
    dt_12 = dt_contr_sum.query('INN_count == 12 and inn_true == True')
    dt_all = dt_contr_sum.query('INN_count not in [10, 12] or inn_true != True')
    # –ö–æ—Å—è—á–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–∏–º —Å—Ä–∞–∑—É FALSE
    dt_all = dt_all[['inn']]
    dt_all['itog'] = False
    #—Å–æ–∑–¥–∞—é —Å—Ç–æ–ª–±—Ü—ã –∏ –∑–∞–ø–æ–ª–Ω—è—é —á–∏—Å–ª–∞–º–∏ –∏–∑ –∏–Ω–Ω, –∫–∞–∂–¥–æ–º—É —á–∏—Å–ª—É —Å–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü
    def num_split(dt, col_1, col_2, numb):
        dt[col_1] = dt[col_2].apply(lambda x: x[numb]).astype('int')
    
    #–Æ–õ    
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10'], range(10)):
        num_split(dt_10, i, 'inn', j)

    #–§–õ    
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10', 'n_11', 'n_12'], range(12)):    
        num_split(dt_12, i, 'inn', j)
    #–†–∞—Å—Å—á–∏—Ç—ã–≤–∞ —á–∏—Å–ª–∞ –≥–¥–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
    dt_10['sum_1'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9'], [2, 4, 10, 3, 5, 9, 4, 6, 8]):
        dt_10['sum_1'] += dt_10[i] * j 
    
    dt_10['sum_1'] = dt_10['sum_1'] % 11 % 10
    dt_10['itog'] = dt_10['sum_1'] == dt_10['n_10']
    dt_10 = dt_10[['inn', 'itog']]
    
    #–†–∞—Å—Å—á–∏—Ç—ã–≤–∞ —á–∏—Å–ª–∞ –≥–¥–µ 12 —Å–∏–º–≤–æ–ª–æ–≤
    dt_12['sum_1'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10'], 
                     [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]): 
        dt_12['sum_1'] +=  dt_12[i] * j
    
    dt_12['sum_1'] = dt_12['sum_1'] % 11 % 10

    dt_12['sum_2'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10', 'sum_1'], 
                 [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]): 
        dt_12['sum_2'] +=  dt_12[i] * j
        
    dt_12['sum_2'] = dt_12['sum_2'] % 11 % 10

    dt_12['itog_1'] = dt_12['sum_1'] == dt_12['n_11']
    dt_12['itog_2'] = dt_12['sum_2'] == dt_12['n_12']
    dt_12['itog'] = dt_12['itog_1'] == dt_12['itog_2']
    dt_12 = dt_12[['inn', 'itog']]
    # —Å–æ–µ–¥–∏–Ω—è—é –≤—Å–µ —Ç—Ä–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞(10, 12 –∏ –∫–æ—Å—è—á–Ω—ã–µ)
    general_itog = pd.concat([dt_12, dt_10])
    general_itog = pd.concat([general_itog, dt_all])
    
    dt_cont_summ_general = general_itog.query('itog == False')
    
    dt_cont_summ_general_1 = dt_cont_summ_general['inn'].tolist()    

    
    # –∑–∞–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–∞ —Å–∫ –±–∏—Ç—å —Å—Ç—Ä–æ–∫
    ff = int(COUNT)
    
    # —Ä–∞—Å—á–µ—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –Ω–µ –ª–µ–∑—Ç—å
    kol = int(len(data) / ff) + 1
    dictt = {}
    for i in range(0, kol):
        dictt[i] = {ff * i : ff * (i + 1)}
        
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ò–ù–ù
    data_22 = data['inn'].tolist()   
    
    # —Ä–∞–∑–±–∏–≤–∫–∞ –ò–ù–ù –ø–æ –¥–∏–∞–ø–æ–∑–æ–Ω–∞–º
    se = {}
    for i in range(kol):
        se[i] = pd.Series(data_22[(int(format(*dictt[i].keys()))) : (int(format(*dictt[i].values())))])
        
    # –∏—Ç–æ–≥–æ–≤–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤—ã—à–µ
    for i in range(kol):
        data[i] = se[i]
        
    # –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
    cols_count_all = len(data.axes[1])
    
    data_1 = data[data.columns[2 : cols_count_all-1]].dropna(how='all')
    data_2 = data[data.columns[cols_count_all-1 : ]].dropna()
    
    cols_count_data_1 = len(data_1.axes[1])
        
    #data = data.drop(['index', 'inn'], axis = 1)
    #data = data.dropna(how='all')
    #data = data.fillna('0')  
    
    #cols_count = len(data.axes[1])
    
    myfile = open(ADRESS + '\\–†–∞–∑–±–∏–≤–∫–∞ Spis_INN '+ dt_now + '.txt', 'w')    
    
    
    # –í–µ—Ä—Å–∏—è –ø–æ–¥ –≤—å—é—Ö—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ò–ù–ù
    
    myfile.write('–í—Å–µ–≥–æ –ò–ù–ù - ' + str(count_all) + '. ')
    myfile.write('–ò–∑ –Ω–∏—Ö –¥—É–±–ª–µ–π - ' + str(count_all - count_all_drop_dupli) + '. ')
    myfile.write('–í—Å–µ–≥–æ –ò–ù–ù —Å —É—á–µ—Ç–æ–º —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π - ' + str(count_all_drop_dupli) + '.\n\n')
    if INN_CHECK == 'YES_OF_COURSE':
        myfile.write('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù –Ω–∞ –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã:\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ - ' + str(dt_count_general_all_1))
        myfile.write('\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ - ' + str(dt_error_general_all_1))    
        myfile.write('\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ - ' + str(dt_cont_summ_general_1))
    else: pass    
    myfile.write('\n')
    myfile.write('\n')
    myfile.write('\n')
    myfile.write('With Spis_INN as(\n')
    
    if cols_count_data_1 == 0:
        for i in range(1):
            myfile.write("select column_value as INN from\n") 
            myfile.write("table(sys.ODCIVARCHAR2LIST(\n")             
            if SELECTED == 'STR': 
                myfile.write("'")
                myfile.write(','.join(data_2[i]).replace(',', "','")) 
                myfile.write("'")
            else:
                myfile.write(','.join(data_2[i]))             
            myfile.write("))\n")
            #myfile.write("union all\n") 
    else:
        for i in range(cols_count_data_1):
            myfile.write("select column_value as INN from\n") 
            myfile.write("table(sys.ODCIVARCHAR2LIST(\n")            
            if SELECTED == 'STR':
                myfile.write("'")
                myfile.write(','.join(data_1[i]).replace(',', "','"))
                myfile.write("'")
            else:
                myfile.write(','.join(data_1[i]))   
            myfile.write("))\n")
            myfile.write("union all\n")
    
        for j in range(cols_count_data_1, cols_count_data_1 + 1):
            myfile.write("select column_value as INN from\n") 
            myfile.write("table(sys.ODCIVARCHAR2LIST(\n")            
            if SELECTED == 'STR':
                myfile.write("'")
                myfile.write(','.join(data_2[j]).replace(',', "','"))
                myfile.write("'")
            else:
                myfile.write(','.join(data_2[j])) 
            myfile.write("))\n")
        
    myfile.write('),')    
    myfile.close()
    
    
# 2Ô∏è‚É£ —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ç–æ—Ä—ã–º –±–ª–æ–∫–æ–º 2Ô∏è‚É£       
def work_2():
    SELECTED_2 = selected_2.get()
    INN_CHECK_2 = inn_check_2.get()
    #lbl.configure(text=selected_2.get())
    
    # –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    dt_now = str(dt.datetime.now().time())[:8].replace(':', ' ')
        
    # —É–ø–∞–∫–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    inn_list = INN_2.split()
    inn_data = pd.DataFrame({'inn' : inn_list})
    
    # –≤ –∫–æ–≤—ã—á–∫–∞—Ö –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ —Å –ò–ù–ù, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —Ä–∞–∑–±–∏—Ç—å
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
    data = inn_data['inn'].sort_values()
    count_all = len(data)
    data = data.drop_duplicates().reset_index()
    count_all_drop_dupli = len(data)
    #data.head()
# ‚ùå2Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤  
    dt_count = data['inn'].reset_index()  # pd.DataFrame()
    dt_error = data['inn'].reset_index()
    dt_contr_sum = data['inn'].reset_index()
    
    def count_num(dt, col, dt_2, col_2):
        dt[col] = dt_2[col_2].str.split('').str.len() - 2         
    
    count_num(dt_count, 'INN_count', data, 'inn') 
    count_num(dt_contr_sum, 'INN_count', data, 'inn') 
    # –æ—Ç–∫–∏–¥—ã–≤–∞–µ–º —Ç–µ—Ö –∫—Ç–æ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª-–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤
    dt_count_general = dt_count.query('INN_count not in [12, 10]')
    
    dt_count_general_all_2 = dt_count_general['inn'].tolist()  
    
    
# ‚≠ï2Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã    
    def count_warning(dt, col, dt_2, col_2):
        dt[col] = dt_2[col_2].str.isnumeric()
        
    count_warning(dt_error, 'inn_true', data, 'inn')
    count_warning(dt_contr_sum, 'inn_true', data, 'inn')
    # –æ—Ç–∫–∏–¥—ã–≤–∞–µ–º —Ç–µ—Ö –∫—Ç–æ —Å –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    dt_error_general = dt_error.query('inn_true == False')
    
    dt_error_general_all_2 = dt_error_general['inn'].tolist()

# üö´ 2Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã 
    # —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ –¥–∞—Ç–∞—Ñ—Ä–µ–º—ã –ø–æ 10 –∏ 12 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ—Å—è—á–Ω—ã–µ
    dt_10 = dt_contr_sum.query('INN_count == 10 and inn_true == True')
    dt_12 = dt_contr_sum.query('INN_count == 12 and inn_true == True')
    dt_all = dt_contr_sum.query('INN_count not in [10, 12] or inn_true != True')
    # –ö–æ—Å—è—á–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–∏–º —Å—Ä–∞–∑—É FALSE
    dt_all = dt_all[['inn']]
    dt_all['itog'] = False
    #—Å–æ–∑–¥–∞—é —Å—Ç–æ–ª–±—Ü—ã –∏ –∑–∞–ø–æ–ª–Ω—è—é —á–∏—Å–ª–∞–º–∏ –∏–∑ –∏–Ω–Ω, –∫–∞–∂–¥–æ–º—É —á–∏—Å–ª—É —Å–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü
    def num_split(dt, col_1, col_2, numb):
        dt[col_1] = dt[col_2].apply(lambda x: x[numb]).astype('int')
    
    #–Æ–õ    
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10'], range(10)):
        num_split(dt_10, i, 'inn', j)

    #–§–õ    
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10', 'n_11', 'n_12'], range(12)):    
        num_split(dt_12, i, 'inn', j)
    #–†–∞—Å—Å—á–∏—Ç—ã–≤–∞ —á–∏—Å–ª–∞ –≥–¥–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
    dt_10['sum_1'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9'], [2, 4, 10, 3, 5, 9, 4, 6, 8]):
        dt_10['sum_1'] += dt_10[i] * j 
    
    dt_10['sum_1'] = dt_10['sum_1'] % 11 % 10
    dt_10['itog'] = dt_10['sum_1'] == dt_10['n_10']
    dt_10 = dt_10[['inn', 'itog']]
    
    #–†–∞—Å—Å—á–∏—Ç—ã–≤–∞ —á–∏—Å–ª–∞ –≥–¥–µ 12 —Å–∏–º–≤–æ–ª–æ–≤
    dt_12['sum_1'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10'], 
                     [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]): 
        dt_12['sum_1'] +=  dt_12[i] * j
    
    dt_12['sum_1'] = dt_12['sum_1'] % 11 % 10

    dt_12['sum_2'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10', 'sum_1'], 
                 [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]): 
        dt_12['sum_2'] +=  dt_12[i] * j
        
    dt_12['sum_2'] = dt_12['sum_2'] % 11 % 10

    dt_12['itog_1'] = dt_12['sum_1'] == dt_12['n_11']
    dt_12['itog_2'] = dt_12['sum_2'] == dt_12['n_12']
    dt_12['itog'] = dt_12['itog_1'] == dt_12['itog_2']
    dt_12 = dt_12[['inn', 'itog']]
    # —Å–æ–µ–¥–∏–Ω—è—é –≤—Å–µ —Ç—Ä–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞(10, 12 –∏ –∫–æ—Å—è—á–Ω—ã–µ)
    general_itog = pd.concat([dt_12, dt_10])
    general_itog = pd.concat([general_itog, dt_all])
    
    dt_cont_summ_general = general_itog.query('itog == False')
    
    dt_cont_summ_general_2 = dt_cont_summ_general['inn'].tolist()  
    
    
    
    # –∑–∞–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–∞ —Å–∫ –±–∏—Ç—å —Å—Ç—Ä–æ–∫
    ff = int(COUNT_2)
    
    # —Ä–∞—Å—á–µ—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –Ω–µ –ª–µ–∑—Ç—å
    kol = int(len(data) / ff) + 1
    dictt = {}
    for i in range(0, kol):
        dictt[i] = {ff * i : ff * (i + 1)}
        
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ò–ù–ù
    data_22 = data['inn'].tolist()   
    
    # —Ä–∞–∑–±–∏–≤–∫–∞ –ò–ù–ù –ø–æ –¥–∏–∞–ø–æ–∑–æ–Ω–∞–º
    se = {}
    for i in range(kol):
        se[i] = pd.Series(data_22[(int(format(*dictt[i].keys()))) : (int(format(*dictt[i].values())))])
        
    # –∏—Ç–æ–≥–æ–≤–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤—ã—à–µ
    for i in range(kol):
        data[i] = se[i]
        
        
    cols_count_all = len(data.axes[1])
    
    data_1 = data[data.columns[2 : cols_count_all-1]].dropna(how='all')
    data_2 = data[data.columns[cols_count_all-1 : ]].dropna()
    
    cols_count_data_1 = len(data_1.axes[1])
    
    #data = data.drop(['index', 'inn'], axis = 1)
    #data = data.dropna(how='all')
    #data = data.fillna('0')  
    
    # cols_count = len(data.axes[1])
    
    myfile = open(ADRESS_2 + '\\–†–∞–∑–±–∏–≤–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é '+ dt_now + '.txt', 'w')    
    
    
    # –í–µ—Ä—Å–∏—è –ø–æ–¥ –≤—å—é—Ö—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ò–ù–ù
    myfile.write('–í—Å–µ–≥–æ –ò–ù–ù - ' + str(count_all) + '. ')
    myfile.write('–ò–∑ –Ω–∏—Ö –¥—É–±–ª–µ–π - ' + str(count_all - count_all_drop_dupli) + '. ')
    myfile.write('–í—Å–µ –ò–ù–ù —Å —É—á–µ—Ç–æ–º —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π - ' + str(count_all_drop_dupli) + '.\n\n')
    if INN_CHECK_2 == 'YES_OF_COURSE':
        myfile.write('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù –Ω–∞ –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã:\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ - ' + str(dt_count_general_all_2))
        myfile.write('\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ - ' + str(dt_error_general_all_2))
        myfile.write('\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ - ' + str(dt_cont_summ_general_2))
    else: pass     
    myfile.write('\n')    
    myfile.write('\n')    
    myfile.write('\n')  
    
    
    if cols_count_data_1 == 0:
        for i in range(1):
            if SELECTED_2 == 'STR':
                myfile.write("'")
                myfile.write(','.join(data_2[i]).replace(',', "','"))
                myfile.write("'") 
            else:
                myfile.write(','.join(data_2[i]))                
            myfile.write('\n')            
            myfile.write('\n')  
    else:
        for i in range(cols_count_data_1):
            if SELECTED_2 == 'STR':
                myfile.write("'")
                myfile.write(','.join(data_1[i]).replace(',', "','"))
                myfile.write("'")   
            else:
                myfile.write(','.join(data_1[i]))
            myfile.write('\n')            
            myfile.write('\n')  
    
        for j in range(cols_count_data_1, cols_count_data_1 + 1):
            if SELECTED_2 == 'STR':
                myfile.write("'")
                myfile.write(','.join(data_2[j]).replace(',', "','"))
                myfile.write("'")  
            else:
                myfile.write(','.join(data_2[j]))
            myfile.write('\n')            
            myfile.write('\n')     
    myfile.close()  
    
    
# 3Ô∏è‚É£ —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ç–æ—Ä—ã–º –±–ª–æ–∫–æ–º 3Ô∏è‚É£  

def work_3():
    INN_CHECK_3 = inn_check_3.get()
    # –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    dt_now = str(dt.datetime.now().time())[:8].replace(':', ' ')
        
    # —É–ø–∞–∫–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    inn_list = INN_3.split()
    inn_data = pd.DataFrame({'inn' : inn_list})
    
    # –≤ –∫–æ–≤—ã—á–∫–∞—Ö –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ —Å –ò–ù–ù, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —Ä–∞–∑–±–∏—Ç—å
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
    data = inn_data['inn'].sort_values()
    count_all = len(data)
    data = data.drop_duplicates().reset_index()
    count_all_drop_dupli = len(data)
    
# ‚ùå3Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤  
    dt_count = data['inn'].reset_index()  # pd.DataFrame()
    dt_error = data['inn'].reset_index()
    dt_contr_sum = data['inn'].reset_index()
    
    def count_num(dt, col, dt_2, col_2):
        dt[col] = dt_2[col_2].str.split('').str.len() - 2         
    
    count_num(dt_count, 'INN_count', data, 'inn') 
    count_num(dt_contr_sum, 'INN_count', data, 'inn') 
    # –æ—Ç–∫–∏–¥—ã–≤–∞–µ–º —Ç–µ—Ö –∫—Ç–æ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª-–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤
    dt_count_general = dt_count.query('INN_count not in [12, 10]')
    
    dt_count_general_all_3 = dt_count_general['inn'].tolist()  
    
    
# ‚≠ï3Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã    
    def count_warning(dt, col, dt_2, col_2):
        dt[col] = dt_2[col_2].str.isnumeric()
        
    count_warning(dt_error, 'inn_true', data, 'inn')
    count_warning(dt_contr_sum, 'inn_true', data, 'inn')
    # –æ—Ç–∫–∏–¥—ã–≤–∞–µ–º —Ç–µ—Ö –∫—Ç–æ —Å –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    dt_error_general = dt_error.query('inn_true == False')
    
    dt_error_general_all_3 = dt_error_general['inn'].tolist()
    

# üö´ 2Ô∏è‚É£ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã 
    # —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ –¥–∞—Ç–∞—Ñ—Ä–µ–º—ã –ø–æ 10 –∏ 12 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ—Å—è—á–Ω—ã–µ
    dt_10 = dt_contr_sum.query('INN_count == 10 and inn_true == True')
    dt_12 = dt_contr_sum.query('INN_count == 12 and inn_true == True')
    dt_all = dt_contr_sum.query('INN_count not in [10, 12] or inn_true != True')
    # –ö–æ—Å—è—á–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–∏–º —Å—Ä–∞–∑—É FALSE
    dt_all = dt_all[['inn']]
    dt_all['itog'] = False
    #—Å–æ–∑–¥–∞—é —Å—Ç–æ–ª–±—Ü—ã –∏ –∑–∞–ø–æ–ª–Ω—è—é —á–∏—Å–ª–∞–º–∏ –∏–∑ –∏–Ω–Ω, –∫–∞–∂–¥–æ–º—É —á–∏—Å–ª—É —Å–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü
    def num_split(dt, col_1, col_2, numb):
        dt[col_1] = dt[col_2].apply(lambda x: x[numb]).astype('int')
    
    #–Æ–õ    
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10'], range(10)):
        num_split(dt_10, i, 'inn', j)

    #–§–õ    
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10', 'n_11', 'n_12'], range(12)):    
        num_split(dt_12, i, 'inn', j)
    #–†–∞—Å—Å—á–∏—Ç—ã–≤–∞ —á–∏—Å–ª–∞ –≥–¥–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
    dt_10['sum_1'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9'], [2, 4, 10, 3, 5, 9, 4, 6, 8]):
        dt_10['sum_1'] += dt_10[i] * j 
    
    dt_10['sum_1'] = dt_10['sum_1'] % 11 % 10
    dt_10['itog'] = dt_10['sum_1'] == dt_10['n_10']
    dt_10 = dt_10[['inn', 'itog']]
    
    #–†–∞—Å—Å—á–∏—Ç—ã–≤–∞ —á–∏—Å–ª–∞ –≥–¥–µ 12 —Å–∏–º–≤–æ–ª–æ–≤
    dt_12['sum_1'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10'], 
                     [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]): 
        dt_12['sum_1'] +=  dt_12[i] * j
    
    dt_12['sum_1'] = dt_12['sum_1'] % 11 % 10

    dt_12['sum_2'] = 0
    for i, j in zip (['n_1', 'n_2', 'n_3', 'n_4', 'n_5', 'n_6', 'n_7', 'n_8', 'n_9', 'n_10', 'sum_1'], 
                 [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]): 
        dt_12['sum_2'] +=  dt_12[i] * j
        
    dt_12['sum_2'] = dt_12['sum_2'] % 11 % 10

    dt_12['itog_1'] = dt_12['sum_1'] == dt_12['n_11']
    dt_12['itog_2'] = dt_12['sum_2'] == dt_12['n_12']
    dt_12['itog'] = dt_12['itog_1'] == dt_12['itog_2']
    dt_12 = dt_12[['inn', 'itog']]
    # —Å–æ–µ–¥–∏–Ω—è—é –≤—Å–µ —Ç—Ä–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞(10, 12 –∏ –∫–æ—Å—è—á–Ω—ã–µ)
    general_itog = pd.concat([dt_12, dt_10])
    general_itog = pd.concat([general_itog, dt_all])
    
    dt_cont_summ_general = general_itog.query('itog == False')
    
    dt_cont_summ_general_3 = dt_cont_summ_general['inn'].tolist()    
    
    # –∑–∞–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–∞ —Å–∫ –±–∏—Ç—å —Å—Ç—Ä–æ–∫
    ff = int(COUNT_3)
    
    # —Ä–∞—Å—á–µ—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –Ω–µ –ª–µ–∑—Ç—å
    kol = int(len(data) / ff) + 1
    dictt = {}
    for i in range(0, kol):
        dictt[i] = {ff * i : ff * (i + 1)}
        
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ò–ù–ù
    data_22 = data['inn'].tolist()   
    
    # —Ä–∞–∑–±–∏–≤–∫–∞ –ò–ù–ù –ø–æ –¥–∏–∞–ø–æ–∑–æ–Ω–∞–º
    se = {}
    for i in range(kol):
        se[i] = pd.Series(data_22[(int(format(*dictt[i].keys()))) : (int(format(*dictt[i].values())))])
        
    # –∏—Ç–æ–≥–æ–≤–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤—ã—à–µ
    for i in range(kol):
        data[i] = se[i]
    
    cols_count_all = len(data.axes[1])
    
    data_1 = data[data.columns[2 : cols_count_all-1]].dropna(how='all')
    data_2 = data[data.columns[cols_count_all-1 : ]].dropna()
    
    cols_count_data_1 = len(data_1.axes[1])
    
    #data = data.drop(['index', 'inn'], axis = 1)
    #data = data.dropna(how='all')
    #data = data.fillna('0')  
    
    #  cols_count = len(data.axes[1])
    
    myfile = open(ADRESS_3 + '\\–†–∞–∑–±–∏–≤–∫–∞ –¥–ª—è –ê–ò–°–∞ '+ dt_now + '.txt', 'w')     
    
    # –í–µ—Ä—Å–∏—è –ø–æ–¥ –≤—å—é—Ö—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ò–ù–ù
    myfile.write('–í—Å–µ–≥–æ –ò–ù–ù - ' + str(count_all) + '. ')
    myfile.write('–ò–∑ –Ω–∏—Ö –¥—É–±–ª–µ–π - ' + str(count_all - count_all_drop_dupli) + '. ')
    myfile.write('–í—Å–µ –ò–ù–ù —Å —É—á–µ—Ç–æ–º —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π - ' + str(count_all_drop_dupli) + '.\n\n')
    if INN_CHECK_3 == 'YES_OF_COURSE':
        myfile.write('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù –Ω–∞ –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã:\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ - ' + str(dt_count_general_all_3))
        myfile.write('\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ - ' + str(dt_error_general_all_3))    
        myfile.write('\n')
        myfile.write('–ò–ù–ù —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ - ' + str(dt_cont_summ_general_3))
    else: pass    
    myfile.write('\n')    
    myfile.write('\n')    
    myfile.write('\n')
    
    if cols_count_data_1 == 0:
        for i in range(1):
            myfile.write('/'.join(data_2[i]))           
            myfile.write('\n')
            myfile.write('\n')             
    else:
        for i in range(cols_count_data_1):
            myfile.write('/'.join(data_1[i]))           
            myfile.write('\n')            
            myfile.write('\n') 
    
        for j in range(cols_count_data_1, cols_count_data_1 + 1):
            myfile.write('/'.join(data_2[j]))           
            myfile.write('\n')            
            myfile.write('\n')    
    myfile.close()     
        
    


    
# üÜë –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–æ –∫–æ–Ω–µ—Ü
def click(): 
    messagebox.showinfo('–ò–∑–≤–µ—â–µ–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø–∞–ø–∫–µ ' + ADRESS + ' , —Ñ–∞–π–ª —É–∂–µ –≥–æ—Ç–æ–≤(–†–∞–∑–±–∏–≤–∫–∞ Spis_INN)!)\n')  
    
# üÜë –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–æ –∫–æ–Ω–µ—Ü
def click_info_2(): 
    messagebox.showinfo('–ò–∑–≤–µ—â–µ–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø–∞–ø–∫–µ ' + ADRESS_2 + ' , —Ñ–∞–π–ª —É–∂–µ –≥–æ—Ç–æ–≤(–†–∞–∑–±–∏–≤–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)!)') 
    
# üÜë –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–æ –∫–æ–Ω–µ—Ü
def click_info_3(): 
    messagebox.showinfo('–ò–∑–≤–µ—â–µ–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø–∞–ø–∫–µ ' + ADRESS_3 + ' , —Ñ–∞–π–ª —É–∂–µ –≥–æ—Ç–æ–≤(–†–∞–∑–±–∏–≤–∫–∞ –¥–ª—è –ê–ò–°3)!)')      
    
# üÜë –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–æ –∏–Ω–Ω
def click_1(): 
    messagebox.showinfo('–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', '–í—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ò–ù–ù —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n0000000001\n0000000002\n0000000003')
    
def click_lang(): 
    messagebox.showinfo('–í–ê–ñ–ù–û!', '–í—Å—Ç–∞–≤–∫–∞ –ò–ù–ù –∏ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é!')    
    
# üÜë –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–æ –∞–¥—Ä–µ—Å
def click_2(): 
    messagebox.showinfo('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!', '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞ –°:\. '+
                        '–ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –≤—Å—Ç–∞–≤–∫—É CTRL+V.') 
    
# üÜë –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–æ –∞–¥—Ä–µ—Å
def click_3_0(): 
    messagebox.showinfo('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!', "STR - —ç—Ç–æ —Ä–∞–∑–±–∏–≤–∫–∞ —Å –∫–∞–≤—ã—á–∫–∞–º–∏ '', –∞\n INT –±–µ–∑ –Ω–∏—Ö.")     
    
# üÜë –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–æ –∫–æ–ª-–≤–æ
def click_3(): 
    messagebox.showinfo('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!', '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫–∞–∑–∞–Ω–æ —á–∏—Å–ª–æ - 990. '+
                        '–ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é –Ω–∞ –ª—é–±–æ–µ.')      
    
# ‚ùå –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π   
def delete():
    
    t.delete(1.0, END)
    #entry_1_1.delete(0, END)
    #entry_1_2.delete(0, END)
    
# ‚ùå  –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π       
def delete_2():
    
    t_2.delete(1.0, END)
    #entry_2_1.delete(0, END)
    #entry_2_2.delete(0, END) 
    
# ‚ùå –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π     
def delete_3():
    
    t_3.delete(1.0, END)
    #entry_3_1.delete(0, END)
    #entry_3_2.delete(0, END)     
    
    
INN = ""
ADRESS = "" 
COUNT = ""
#SELECTED = ""    
selected = StringVar(value="STR")
inn_check = StringVar(value="YES_OF_COURSE")

INN_2 = ""
ADRESS_2 = "" 
COUNT_2 = ""
selected_2 = StringVar(value="STR")
inn_check_2 = StringVar(value="YES_OF_COURSE")

INN_3 = ""
ADRESS_3 = "" 
COUNT_3 = ""
inn_check_3 = StringVar(value="YES_OF_COURSE")


#t =  StringVar()
adress = StringVar(value='C:\\')  
count = StringVar(value=990) 


#t =  StringVar()
adress_2 = StringVar(value='C:\\')  
count_2 = StringVar(value=990) 

#t =  StringVar()
adress_3 = StringVar(value='C:\\')  
count_3 = StringVar(value=990) 


# —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
tab_control = ttk.Notebook(root)
tab_1 = ttk.Frame(tab_control)
tab_2 = ttk.Frame(tab_control)
tab_3 = ttk.Frame(tab_control)
tab_control.add(tab_1, text='–ü–æ–¥ —à–∞–ø–∫—É With Spis_INN',)
tab_control.add(tab_2, text='–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è OR/AND')
tab_control.add(tab_3, text='–î–ª—è –ê–ò–°–∞')

#---------------------------------------------------------
# ******************************************************************************************************
# –°–¢–†–ê–ù–ò–¶–ê 1 1Ô∏è‚É£
#–¢–µ–∫—Å—Ç

lbl_1 = Label(tab_1, text="–†–∞–∑–±–∏–≤–∫–∞ –ò–ù–ù –ø–æ —à–∞–±–ª–æ–Ω—É Spis_inn\n With Spis_INN as(\n        select column_value as INN from\ntable(sys.ODCIVARCHAR2LIST(\n        STR - '0000000001','0000000002','0000000003'\n        INT - 0000000001,0000000002,0000000003)))", 
              background='powder blue',
              foreground = 'Darkorchid4',
              borderwidth = 5,
              height = 6,
              relief=RIDGE,
              padx=135 ,
              font=('Arial', 11)
             ).grid(row=1, column=0,  columnspan=4
                             )

                             
lbl_1_2 = Label(tab_1, text="–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–Ω - ",
                #background='CadetBlue2',
              foreground = 'Darkorchid4',
              borderwidth = 5,
              #  relief=RIDGE,
                 height = 2,
               font=('Arial', 11),
               padx=5, pady=5).grid(row=2, column=0)  

lbl_1_3 = Label(tab_1, text="–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - ",
               #background='CadetBlue2',
              foreground = 'Darkorchid4',
              borderwidth = 5, 
               # relief=RIDGE,
              #height = 2,
               font=('Arial', 11),
                justify = LEFT,
                padx=5, pady=5).grid(row=5, column=0) 

lbl_1_4 = Label(tab_1, text="–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª_–≤–æ –ò–ù–ù\n –¥–µ–ª–∞—Ç—å —Ä–∞–∑–±–∏–≤–∫—É - ",
               #background='CadetBlue2',
               foreground = 'Darkorchid4',
               borderwidth = 5,
                #relief=RIDGE,
               #height =2,
               font=('Arial', 11),
                padx=5, pady=5).grid(row=6, column=0) 

# –ü—Ä–∏–µ–º–∫–∞ –∏–Ω—Ñ—ã
t = Text(tab_1, width = 30, height=10, wrap=WORD,)
t.grid(row=2, column=1,)
entry_1_1 = Entry(tab_1, textvariable=adress, width = 40)
entry_1_1.grid(row=5, column=1) 

entry_1_2 = Entry(tab_1, textvariable=count, width = 20)
entry_1_2.grid(row=6, column=1) 

# –ö–Ω–æ–ø–∫–∏
button = Button(tab_1, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–±–∏–≤–∫—É", command=lambda : [get_address(), work_1(), click()],
                background='powder blue',
                foreground = 'Darkorchid4',
                borderwidth = 3,
                relief=RAISED,
                #height = 1,width = 2, 
                font=('Arial', 12),
               ).grid(row=7, column=1)
button_1 = Button(tab_1, text="?", command= click_1,
                 background='powder blue',
                  foreground = 'DarkGoldenrod1',
                  borderwidth = 3,
                  relief=RAISED,
                  #height = 1,width = 2, 
                font=('Arial', 16),).grid(row=2, column=2)
button_111 = Button(tab_1, text="?", command= click_3_0,
                 background='powder blue',
                  foreground = 'DarkGoldenrod1',
                  borderwidth = 3,
                  relief=RAISED,
                  #height = 1,width = 2, 
                font=('Arial', 16),).grid(row=4, column=2)


button_11 = Button(tab_1, text="!!!", command= click_lang,
                 background='powder blue',
                  foreground = 'red',
                  borderwidth = 3,
                  relief=RAISED,
                  #height = 1,width = 2, 
                font=('Arial', 16),).grid(row=2, column=3)

### üìª Radiobutton üòÉ
rad_1_3 = Radiobutton(tab_1, text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù', value = 'YES_OF_COURSE', variable=inn_check,
                      #fg = 'Darkorchid4',
                      
                    #command = work_1
                   )
rad_1_4 = Radiobutton(tab_1, text = '–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù', value = 'NONE', variable=inn_check, 
                    #command = work_1
                   )

rad_1_1 = Radiobutton(tab_1, text = 'STR(—Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã\n —Å –∫–∞–≤—ã—á–∫–∞–º–∏'')', value = 'STR', variable=selected,
                      #fg = 'Darkorchid4',
                      
                    #command = work_1
                   )
rad_1_2 = Radiobutton(tab_1, text = 'INT(—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã\n –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)', value = 'INT', variable=selected, 
                    #command = work_1
                   )

#lbl=Label(tab_1, foreground = 'Darkorchid4',
              # borderwidth = 5,               
               #font=('Arial', 11),
          # relief=RIDGE,
                #padx=5, pady=5)

rad_1_1.grid(row=4, column=0, sticky=W, padx = 30)
rad_1_2.grid(row=4, column=1, sticky=W, padx = 30)

rad_1_3.grid(row=3, column=0, sticky=W, padx = 30)
rad_1_4.grid(row=3, column=1, sticky=W, padx = 30)
#lbl.grid(row=3, column=2)


button_2 = Button(tab_1, text="?", command = click_2,
                 background='powder blue',
                  foreground = 'DarkGoldenrod1',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 1,
                  #width = 2,
                   font=('Arial', 16),).grid(row=5, column=2)
button_3 = Button(tab_1, text="?", command= click_3,
                 background='powder blue',
                  foreground = 'DarkGoldenrod1',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 2,
                   font=('Arial', 16),).grid(row=6, column=2)
button_del = Button(tab_1, text="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è", command= delete,
                 background='powder blue',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 2,
                   font=('Arial', 12),).grid(row=7, column=0)
#t.grid(row=2, column=1,)


# –°–¢–†–ê–ù–ò–¶–ê 2Ô∏è‚É£ ******************************************************************************
#–¢–µ–∫—Å—Ç
lbl_2 = Label(tab_2,
        text="–†–∞–∑–±–∏–≤–∫–∞ –ò–ù–ù —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\nSTR - '0000000001','0000000002','0000000003'\n\n\
        INT - 0000000001,0000000002,0000000003",          
          background='peach puff',
          foreground = 'Darkorchid4',
          borderwidth = 6,
             height = 6,
              relief=RIDGE,
              padx=135 ,
              font=('Arial', 11)
             ).grid(row=1, column=0,  columnspan=4
                   )

lbl_2_2 = Label(tab_2, text="–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–Ω - ",
                #background='CadetBlue2',
              foreground = 'Darkorchid4',
              borderwidth = 5,
              #  relief=RIDGE,
                 height = 2,
               font=('Arial', 11),
               padx=5, pady=5).grid(row=2, column=0)  

lbl_2_3 = Label(tab_2, text="–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - ",
               #background='CadetBlue2',
              foreground = 'Darkorchid4',
              borderwidth = 5, 
               # relief=RIDGE,
              #height = 2,
               font=('Arial', 11),
                justify = LEFT,
                padx=5, pady=5).grid(row=5, column=0) 

lbl_2_4 = Label(tab_2, text="–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª_–≤–æ –ò–ù–ù\n –¥–µ–ª–∞—Ç—å —Ä–∞–∑–±–∏–≤–∫—É - ",
               #background='CadetBlue2',
               foreground = 'Darkorchid4',
               borderwidth = 5,
                #relief=RIDGE,
               #height =2,
               font=('Arial', 11),
                padx=5, pady=5).grid(row=6, column=0) 

# –ü—Ä–∏–µ–º–∫–∞ –∏–Ω—Ñ—ã
t_2 = Text(tab_2, width = 30, height=10, wrap=WORD,)
t_2.grid(row=2, column=1,)
entry_2_1 = Entry(tab_2, textvariable=adress_2, width = 40)
entry_2_1.grid(row=5, column=1) 
entry_2_2 = Entry(tab_2, textvariable=count_2, width = 20)
entry_2_2.grid(row=6, column=1) 

# –ö–Ω–æ–ø–∫–∏
button_22 = Button(tab_2, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–±–∏–≤–∫—É", command=lambda : [get_address_2(), work_2(), click_info_2()],
                background='peach puff',
                foreground = 'Darkorchid4',
                borderwidth = 3,
                relief=RAISED,
                #height = 1,width = 2, 
                font=('Arial', 12),
               ).grid(row=7, column=1)


button_111 = Button(tab_2, text="?", command= click_3_0,
                 background='peach puff',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                  relief=RAISED,
                  #height = 1,width = 2, 
                font=('Arial', 16),).grid(row=4, column=2)

### üìª Radiobutton üòÉ
rad_2_3 = Radiobutton(tab_2, text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù', value = 'YES_OF_COURSE', variable=inn_check_2,
                      #fg = 'Darkorchid4',
                      
                    #command = work_1
                   )
rad_2_4 = Radiobutton(tab_2, text = '–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù', value = 'NONE', variable=inn_check_2,
                    #command = work_1
                   )

rad_2_1 = Radiobutton(tab_2, text = 'STR(—Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã\n —Å –∫–∞–≤—ã—á–∫–∞–º–∏'')', value = 'STR', variable=selected_2,
                      #fg = 'Darkorchid4',
                      
                    #command = work_1
                   )
rad_2_2 = Radiobutton(tab_2, text = 'INT(—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã\n –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)', value = 'INT', variable=selected_2, 
                    #command = work_1
                   )

#lbl=Label(tab_1, foreground = 'Darkorchid4',
              # borderwidth = 5,               
               #font=('Arial', 11),
          # relief=RIDGE,
                #padx=5, pady=5)

rad_2_1.grid(row=4, column=0, sticky=W, padx = 30)
rad_2_2.grid(row=4, column=1, sticky=W, padx = 30)

rad_2_3.grid(row=3, column=0, sticky=W, padx = 30)
rad_2_4.grid(row=3, column=1, sticky=W, padx = 30)
#lbl.grid(row=3, column=2)


button_11 = Button(tab_2, text="!!!", command= click_lang,
                 background='peach puff',
                  foreground = 'red',
                  borderwidth = 3,
                  relief=RAISED,
                  #height = 1,width = 2, 
                font=('Arial', 16),).grid(row=2, column=3)

button_2_1 = Button(tab_2, text="?", command= click_1,
                 background='peach puff',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                  relief=RAISED,
                  #height = 1,width = 2, 
                font=('Arial', 16),).grid(row=2, column=2)

button_2_2 = Button(tab_2, text="?", command = click_2,
                 background='peach puff',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 1,
                  #width = 2,
                   font=('Arial', 16),).grid(row=5, column=2)

button_2_3 = Button(tab_2, text="?", command= click_3,
                 background='peach puff',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 2,
                   font=('Arial', 16),).grid(row=6, column=2)

button_del = Button(tab_2, text="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è", command= delete_2,
                 background='peach puff',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 2,
                   font=('Arial', 12),).grid(row=7, column=0)


# –°–¢–†–ê–ù–ò–¶–ê 3Ô∏è‚É£ ***************************************************************
# –¢–µ–∫—Å—Ç
lbl_3 = Label(tab_3,
        text="–†–∞–∑–±–∏–≤–∫–∞ –ò–ù–ù –¥–ª—è –ê–ò–°–∞\n\n 0000000001/0000000002/0000000003",          
          background='PaleGreen2',
          foreground = 'Darkorchid4',
          borderwidth = 8,
             height = 6,
              relief=RIDGE,
              padx=170 ,
              font=('Arial', 11)
             ).grid(row=1, column=0,  columnspan=4
                   )

lbl_3_2 = Label(tab_3, text="–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–Ω - ",
                #background='CadetBlue2',
              foreground = 'Darkorchid4',
              borderwidth = 5,
              #  relief=RIDGE,
                 height = 2,
               font=('Arial', 11),
               padx=5, pady=5).grid(row=2, column=0)  

lbl_3_3 = Label(tab_3, text="–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - ",
               #background='CadetBlue2',
              foreground = 'Darkorchid4',
              borderwidth = 5, 
               # relief=RIDGE,
              #height = 2,
               font=('Arial', 11),
                justify = LEFT,
                padx=5, pady=5).grid(row=4, column=0) 

lbl_3_4 = Label(tab_3, text="–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª_–≤–æ –ò–ù–ù\n –¥–µ–ª–∞—Ç—å —Ä–∞–∑–±–∏–≤–∫—É - ",
               #background='CadetBlue2',
               foreground = 'Darkorchid4',
               borderwidth = 5,
                #relief=RIDGE,
               #height =2,
               font=('Arial', 11),
                padx=5, pady=5).grid(row=5, column=0) 

# –ü—Ä–∏–µ–º–∫–∞ –∏–Ω—Ñ—ã
t_3 = Text(tab_3, width = 30, height=10, wrap=WORD,)
t_3.grid(row=2, column=1,)
entry_3_1 = Entry(tab_3, textvariable=adress_3, width = 40)
entry_3_1.grid(row=4, column=1) 
entry_3_2 = Entry(tab_3, textvariable=count_3, width = 20)
entry_3_2.grid(row=5, column=1) 

# –ö–Ω–æ–ø–∫–∏
button_22 = Button(tab_3, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–±–∏–≤–∫—É", command=lambda : [get_address_3(), work_3(), click_info_3()],
                background='PaleGreen2',
                foreground = 'Darkorchid4',
                borderwidth = 3,
                relief=RAISED,
                #height = 1,width = 2, 
                font=('Arial', 12),
               ).grid(row=6, column=1)

button_11 = Button(tab_3, text="!!!", command= click_lang,
                 background='PaleGreen2',
                  foreground = 'red',
                  borderwidth = 3,
                  relief=RAISED,
                  #height = 1,width = 2, 
                font=('Arial', 16),).grid(row=2, column=3)

button_2_1 = Button(tab_3, text="?", command= click_1,
                 background='PaleGreen2',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                  relief=RAISED,
                  #height = 1,width = 2, 
                font=('Arial', 16),).grid(row=2, column=2)

button_2_2 = Button(tab_3, text="?", command = click_2,
                 background='PaleGreen2',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 1,
                  #width = 2,
                   font=('Arial', 16),).grid(row=4, column=2)

button_2_3 = Button(tab_3, text="?", command= click_3,
                 background='PaleGreen2',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 2,
                   font=('Arial', 16),).grid(row=5, column=2)

button_del = Button(tab_3, text="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è", command= delete_3,
                 background='PaleGreen2',
                  foreground = 'Darkorchid4',
                  borderwidth = 3,
                    relief=RAISED,
                     #height = 2,
                   font=('Arial', 12),).grid(row=6, column=0) 

rad_3_1 = Radiobutton(tab_3, text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù', value = 'YES_OF_COURSE', variable=inn_check_3,                      
                   )
rad_3_2 = Radiobutton(tab_3, text = '–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù', value = 'NONE', variable=inn_check_3, 
                    #command = work_1
                   )

rad_3_1.grid(row=3, column=0, sticky=S, padx = 30, pady=10)
rad_3_2.grid(row=3, column=1, sticky=S, padx = 30, pady=10)

#butt_1.grid(row=2, column=2)
#butt_2.grid(row=2, column=2)
tab_control.pack(expand=1, fill='both')

py_win_keyboard_layout.change_foreground_window_keyboard_layout(0x04090409)

root.mainloop()


# In[ ]:




